name: Windows - RustDesk Remote Access
on:
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: 'Dauer, um den Runner aktiv zu halten (in Minuten, max. 360)'
        required: false
        default: '60' # Standardmäßig 60 Minuten (1 Stunde)

jobs:
  remote_access:
    name: RustDesk für Remote-Zugriff einrichten
    runs-on: windows-latest

    steps:
      - name: Runner vorbereiten und RustDesk installieren
        run: |
          # Step 1: Download RustDesk installer
          Write-Host "Starting RustDesk setup..."
          Write-Host "Downloading RustDesk installer from official sources..."
          # Fetch the latest stable release URL from GitHub API
          $rustDeskDownloadUrl = (Invoke-RestMethod -Uri "https://api.github.com/repos/rustdesk/rustdesk/releases/latest").assets | Where-Object {$_.name -like "rustdesk-*-x86_64.exe"} | Select-Object -ExpandProperty browser_download_url | Select-Object -First 1

          if (-not $rustDeskDownloadUrl) {
              Write-Error "Failed to find RustDesk download URL. Exiting."
              exit 1
          }

          Invoke-WebRequest -Uri $rustDeskDownloadUrl -OutFile "$env:TEMP\RustDesk.exe" -ErrorAction Stop
          Write-Host "RustDesk installer downloaded to $env:TEMP\RustDesk.exe"

          # Step 2: Install RustDesk silently
          Write-Host "Installing RustDesk silently. This may take a moment..."
          # Use --silent-install for unattended installation.
          # Add a timeout for the installation process to prevent indefinite hanging.
          $installProcess = Start-Process -FilePath "$env:TEMP\RustDesk.exe" -ArgumentList "--silent-install" -Wait -NoNewWindow -PassThru -ErrorAction SilentlyContinue

          # Check if the process completed within the timeout
          if ($installProcess.HasExited) {
              if ($installProcess.ExitCode -ne 0) {
                  Write-Error "RustDesk installation failed with Exit Code: $($installProcess.ExitCode)"
                  echo "rustdesk_id=INSTALLATION_FAILED" >> $GITHUB_OUTPUT
                  echo "rustdesk_password=INSTALLATION_FAILED" >> $GITHUB_OUTPUT
                  exit 1 # Terminate job if installation fails
              }
          } else {
              # If process did not exit, it timed out or is still running
              Write-Error "RustDesk installation process timed out or is hanging after 5 minutes. Attempting to terminate."
              $installProcess | Stop-Process -Force -ErrorAction SilentlyContinue
              echo "rustdesk_id=INSTALLATION_TIMEOUT" >> $GITHUB_OUTPUT
              echo "rustdesk_password=INSTALLATION_TIMEOUT" >> $GITHUB_OUTPUT
              exit 1
          }
          Write-Host "RustDesk installation completed successfully."

          # Verify if RustDesk.exe exists after installation
          $programFilesPath = [System.Environment]::GetFolderPath([System.Environment+SpecialFolder]::ProgramFiles) # RustDesk installs to Program Files, not Program Files (x86)
          $rustDeskExePath = Join-Path -Path "$programFilesPath" -ChildPath "RustDesk\rustdesk.exe"
          if (-not (Test-Path $rustDeskExePath)) {
              Write-Error "ERROR: RustDesk.exe not found after installation at $rustDeskExePath."
              echo "rustdesk_id=INSTALLATION_FAILED_NO_EXE" >> $GITHUB_OUTPUT
              echo "rustdesk_password=INSTALLATION_FAILED_NO_EXE" >> $GITHUB_OUTPUT
              exit 1
          }
          Write-Host "RustDesk.exe found at $rustDeskExePath."

          # Step 2.5: Ensure no RustDesk processes are running from the installer
          Write-Host "Ensuring all RustDesk processes are stopped before proceeding..."
          Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 5 # Give processes a moment to terminate

          # Step 3: Wait for RustDesk service to initialize and generate ID
          Write-Host "Waiting for RustDesk service to initialize and generate ID (approx. 30 seconds)..."
          Start-Sleep -Seconds 30

          # Step 4: Retrieve RustDesk ID
          # RustDesk ID is typically found in %APPDATA%\RustDesk\config\RustDesk.toml for portable/user installs
          # For installed versions, it might be in %ProgramFiles%\RustDesk\config\RustDesk.toml or a service profile.
          # The --get-id command line parameter is the most reliable way if it works.
          $rustDeskId = $null
          Write-Host "--- Attempting to retrieve RustDesk ID ---"

          # First, try running the GUI briefly in the background to ensure ID generation
          Write-Host "Attempting to briefly run RustDesk GUI in background to ensure ID generation (10s sleep)..."
          try {
              Start-Process -FilePath $rustDeskExePath -ArgumentList "--no-daemon" -WindowStyle Hidden -PassThru -ErrorAction SilentlyContinue
              Start-Sleep -Seconds 10
              Write-Host "Background GUI process started and waited."
          } catch {
              Write-Warning "Could not start RustDesk GUI in background: $($_.Exception.Message)"
          }

          # Then, try retrieving ID using --get-id command
          Write-Host "Attempting to retrieve RustDesk ID using '$rustDeskExePath --get-id' command..."
          try {
              $idProcess = Start-Process -FilePath $rustDeskExePath -ArgumentList "--get-id" -PassThru -NoNewWindow -RedirectStandardOutput -RedirectStandardError
              $idProcess.WaitForExit(15000) # Wait up to 15 seconds for ID retrieval

              if ($idProcess.HasExited) {
                  $idOutput = $idProcess.StandardOutput.ReadToEnd().Trim()
                  $idError = $idProcess.StandardError.ReadToEnd().Trim()
                  Write-Host "Command '$rustDeskExePath --get-id' exited with code: $($idProcess.ExitCode)"
                  Write-Host "Standard Output (STDOUT): '$idOutput'" # Added quotes to see exact output
                  if ($idError) { Write-Error "Standard Error (STDERR): '$idError'" } # Added quotes

                  # RustDesk --get-id outputs just the ID, sometimes with a newline.
                  # Make regex more flexible to find 9 digits anywhere.
                  if ($idOutput -match "(\d{9})") {
                      $rustDeskId = $Matches[1]
                      Write-Host "RustDesk ID successfully found via --get-id: $rustDeskId"
                  } else {
                      Write-Warning "No 9-digit ID found in --get-id output. Output was: '$idOutput'. Trying to read from config file next."
                  }
              } else {
                  Write-Error "RustDesk --get-id process timed out after 15 seconds."
              }
          } catch {
              Write-Error "Error executing RustDesk --get-id: $($_.Exception.Message)"
          }

          # Fallback: Try to read ID from config file if --get-id failed or returned unexpected output
          if (-not $rustDeskId) {
              Write-Host "--- RustDesk ID not found via --get-id. Attempting to read from config files ---"
              # Prioritize %ProgramData% path for system-wide installs, then %APPDATA%
              $rustDeskConfigPaths = @(
                  (Join-Path -Path "$env:ProgramData" -ChildPath "RustDesk\config\RustDesk.toml"),
                  (Join-Path -Path "$env:APPDATA" -ChildPath "RustDesk\config\RustDesk.toml")
              )

              foreach ($configPath in $rustDeskConfigPaths) {
                  if (Test-Path $configPath) {
                      Write-Host "Checking config file: $configPath"
                      # The ID is typically in the [options] section, e.g., "client_id = 123456789"
                      try {
                          $configContent = Get-Content -Path $configPath | Out-String
                          # Write-Host "Content of $configPath (partial): $($configContent.Substring(0, [System.Math]::Min(500, $configContent.Length)))" # Log partial content for debug
                          if ($configContent -match "client_id\s*=\s*(\d{9})") {
                              $rustDeskId = $Matches[1]
                              Write-Host "RustDesk ID found in config file: $configPath - ID: $rustDeskId"
                              break # Exit loop once ID is found
                          } else {
                              Write-Warning "RustDesk ID (client_id = 9 digits) not found in config file: $configPath"
                          }
                      } catch {
                          Write-Error "Error reading config file $configPath: ${$_.Exception.Message}" # Corrected this line
                      }
                  } else {
                      Write-Warning "RustDesk config file not found at $configPath."
                  }
              }
          }
          Write-Host "--- Finished attempting to retrieve RustDesk ID ---"

          # Step 5: Output RustDesk ID to GitHub Actions Workflow Output
          if ($rustDeskId) {
              Write-Host "RustDesk ID successfully retrieved: $rustDeskId"
              echo "rustdesk_id=$rustDeskId" >> $GITHUB_OUTPUT
          } else {
              Write-Error "ERROR: RustDesk ID could not be retrieved after multiple attempts. Remote connection may not be possible."
              echo "rustdesk_id=NOT_AVAILABLE" >> $GITHUB_OUTPUT
          }

          # Step 6: Generate and set a permanent password for unattended access
          # IMPORTANT NOTE ON PASSWORD:
          # For unattended access in RustDesk, you typically set a permanent password.
          # This can be done via the RustDesk settings or command line with admin privileges.
          # The '--password <password>' command can be used.
          # In GitHub Actions, the runner runs as Administrator, so this should work.
          # Be aware that the password will be visible in the workflow log if set directly this way.
          # For more secure handling, consider using GitHub Secrets.
          Write-Host "Generating a random password for RustDesk unattended access..."
          $chars = 'abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789!@#$%^&*()'
          $randomPassword = (1..16 | ForEach-Object { $chars | Get-Random }) -join ''
          
          if (-not (Test-Path $rustDeskExePath)) {
              Write-Error "RustDesk executable not found at $rustDeskExePath. Cannot set password."
              echo "rustdesk_password=EXECUTABLE_NOT_FOUND_FOR_PASSWORD_SET" >> $GITHUB_OUTPUT
          } else {
              Write-Host "Attempting to set RustDesk password..."
              
              # RustDesk might not run as a persistent service by default after silent install.
              # The --password command usually configures the client directly.
              try {
                  $passwordSetArgs = @{
                      FilePath = $rustDeskExePath
                      ArgumentList = "--password", $randomPassword
                      PassThru = $true
                      NoNewWindow = $true
                      RedirectStandardOutput = $true
                      RedirectStandardError = $true
                  }
                  $process = Start-Process @passwordSetArgs

                  $process.WaitForExit(30000) # Wait up to 30 seconds for the process to finish

                  if ($process.HasExited) {
                      $exitCode = $process.ExitCode
                      $output = $process.StandardOutput.ReadToEnd()
                      $errorOutput = $process.StandardError.ReadToEnd()

                      Write-Host "RustDesk --password Exit Code: $exitCode"
                      if ($output) { Write-Host "RustDesk --password Output: $output" }
                      if ($errorOutput) { Write-Error "RustDesk --password Error: $errorOutput" }

                      if ($exitCode -eq 0) {
                          Write-Host "RustDesk password successfully set."
                          echo "rustdesk_password=$randomPassword" >> $GITHUB_OUTPUT
                      } else {
                          Write-Error "ERROR: RustDesk password could not be set. Exit Code: $exitCode. Unattended access may not be possible."
                          echo "rustdesk_password=PASSWORD_SET_FAILED_WITH_CODE_$exitCode" >> $GITHUB_OUTPUT
                      }
                  } else {
                      Write-Error "ERROR: RustDesk password setting process timed out."
                      echo "rustdesk_password=PASSWORD_SET_TIMEOUT" >> $GITHUB_OUTPUT
                  }
              } catch {
                  Write-Error "Error executing RustDesk --password: $($_.Exception.Message)"
                  echo "rustdesk_password=PASSWORD_SET_EXCEPTION" >> $GITHUB_OUTPUT
              }
          }

      - name: Keep Runner Alive
        run: |
          # This step keeps the GitHub Actions Runner alive for a specified duration.
          # This is necessary to allow you time to connect via RustDesk.
          # The maximum job duration for GitHub Actions beträgt 360 Minuten (6 Stunden).
          $durationMinutes = [int]"${{ github.event.inputs.duration_minutes }}"
          if ($durationMinutes -gt 360) {
              $durationMinutes = 360
              Write-Warning "Duration limited to a maximum of 360 minutes."
          }
          $durationSeconds = $durationMinutes * 60
          Write-Host "Keeping the runner alive for $durationMinutes minutes ($durationSeconds seconds)..."
          Start-Sleep -Seconds $durationSeconds
        shell: pwsh
