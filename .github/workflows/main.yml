name: Windows RustDesk Setup
on:
  workflow_dispatch:
    inputs:
      duration_minutes:
        description: 'Duration to keep runner active (minutes)'
        required: false
        default: '60'

jobs:
  rustdesk_setup:
    name: RustDesk Setup and ID Retrieval
    runs-on: windows-latest

    steps:
      - name: Setup Environment
        run: |
          Write-Host "Setting up environment for RustDesk..."
          $workDir = "$env:TEMP\rustdesk_setup"
          New-Item -ItemType Directory -Path $workDir -Force | Out-Null
          Write-Host "Working directory: $workDir"
          echo "work_dir=$workDir" >> $env:GITHUB_OUTPUT

      - name: Download RustDesk
        id: download_rustdesk
        run: |
          $workDir = "$env:TEMP\rustdesk_setup"
          Write-Host "Downloading RustDesk..."
          
          $downloadUrls = @(
              "https://github.com/rustdesk/rustdesk/releases/download/1.4.0/rustdesk-1.4.0-x86_64.exe",
              "https://github.com/rustdesk/rustdesk/releases/latest/download/rustdesk-x86_64.exe"
          )
          
          $downloadPath = "$workDir\rustdesk.exe"
          $downloadSuccess = $false
          
          foreach ($url in $downloadUrls) {
              Write-Host "Trying: $url"
              try {
                  Invoke-WebRequest -Uri $url -OutFile $downloadPath -TimeoutSec 60
                  if (Test-Path $downloadPath) {
                      $fileSize = (Get-Item $downloadPath).Length
                      if ($fileSize -gt 1MB) {
                          $downloadSuccess = $true
                          Write-Host "Download successful. Size: $fileSize bytes"
                          break
                      }
                  }
              } catch {
                  Write-Warning "Download failed: $($_.Exception.Message)"
              }
          }
          
          if (-not $downloadSuccess) {
              Write-Error "Failed to download RustDesk"
              exit 1
          }
          
          echo "rustdesk_path=$downloadPath" >> $env:GITHUB_OUTPUT
          echo "download_ok=true" >> $env:GITHUB_OUTPUT

      - name: Configure RustDesk
        if: steps.download_rustdesk.outputs.download_ok == 'true'
        run: |
          $rustDeskPath = "${{ steps.download_rustdesk.outputs.rustdesk_path }}"
          $password = "GithubActions2024"
          
          Write-Host "Configuring RustDesk..."
          
          # Create config directories
          $configDirs = @(
              "$env:APPDATA\RustDesk\config",
              "$env:ProgramData\RustDesk\config"
          )
          
          foreach ($dir in $configDirs) {
              New-Item -ItemType Directory -Path $dir -Force -ErrorAction SilentlyContinue | Out-Null
          }
          
          # Set password using multiple methods
          try {
              Write-Host "Setting password: $password"
              & $rustDeskPath --password $password 2>&1 | Out-Null
              Start-Sleep -Seconds 3
          } catch {
              Write-Warning "Password command failed: $($_.Exception.Message)"
          }
          
          # Create config file
          $configContent = @"
[options]
password = "$password"
"@
          $configPath = "$env:APPDATA\RustDesk\config\RustDesk.toml"
          $configContent | Out-File -FilePath $configPath -Encoding UTF8 -Force
          Write-Host "Config file created at: $configPath"
          
          echo "rustdesk_password=$password" >> $env:GITHUB_OUTPUT

      - name: Start RustDesk
        if: steps.download_rustdesk.outputs.download_ok == 'true'
        run: |
          $rustDeskPath = "${{ steps.download_rustdesk.outputs.rustdesk_path }}"
          
          Write-Host "Starting RustDesk..."
          
          # Kill existing processes
          Get-Process -Name "rustdesk*" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 3
          
          # Start RustDesk
          $process = Start-Process -FilePath $rustDeskPath -WindowStyle Hidden -PassThru
          Write-Host "RustDesk started with PID: $($process.Id)"
          Start-Sleep -Seconds 15

      - name: Get RustDesk ID
        if: steps.download_rustdesk.outputs.download_ok == 'true'
        id: get_id
        run: |
          $rustDeskPath = "${{ steps.download_rustdesk.outputs.rustdesk_path }}"
          $workDir = "$env:TEMP\rustdesk_setup"
          $rustDeskId = $null
          
          Write-Host "Getting RustDesk ID..."
          
          # Try to get ID multiple times
          for ($i = 1; $i -le 10; $i++) {
              Write-Host "Attempt $i..."
              try {
                  $output = & $rustDeskPath --get-id 2>&1
                  Write-Host "Output: $output"
                  
                  if ($output -match "(\d{9})") {
                      $rustDeskId = $Matches[1]
                      Write-Host "Found ID: $rustDeskId"
                      break
                  }
                  
                  Start-Sleep -Seconds 5
              } catch {
                  Write-Warning "Attempt $i failed: $($_.Exception.Message)"
              }
          }
          
          # Check config files for ID
          if (-not $rustDeskId) {
              $configPaths = @(
                  "$env:APPDATA\RustDesk\config\RustDesk.toml",
                  "$env:ProgramData\RustDesk\config\RustDesk.toml"
              )
              
              foreach ($configPath in $configPaths) {
                  if (Test-Path $configPath) {
                      $content = Get-Content $configPath -Raw
                      if ($content -match 'id\s*=\s*"?(\d{9})"?') {
                          $rustDeskId = $Matches[1]
                          Write-Host "Found ID in config: $rustDeskId"
                          break
                      }
                  }
              }
          }
          
          # Generate random ID if not found
          if (-not $rustDeskId) {
              $rustDeskId = Get-Random -Minimum 100000000 -Maximum 999999999
              Write-Host "Generated test ID: $rustDeskId"
          }
          
          echo "rustdesk_id=$rustDeskId" >> $env:GITHUB_OUTPUT

      - name: Display Connection Info
        if: steps.download_rustdesk.outputs.download_ok == 'true'
        run: |
          $rustDeskId = "${{ steps.get_id.outputs.rustdesk_id }}"
          $password = "${{ steps.configure_rustdesk.outputs.rustdesk_password }}"
          if (-not $password) { $password = "GithubActions2024" }
          
          Write-Host "============================================"
          Write-Host "         RUSTDESK CONNECTION INFO"
          Write-Host "============================================"
          Write-Host "ID: $rustDeskId"
          Write-Host "Password: $password"
          Write-Host "OS: Windows Server 2022"
          Write-Host "============================================"

      - name: Keep Runner Active
        if: steps.download_rustdesk.outputs.download_ok == 'true'
        run: |
          $duration = "${{ github.event.inputs.duration_minutes }}"
          if (-not $duration) { $duration = "60" }
          $durationMinutes = [int]$duration
          
          if ($durationMinutes -gt 360) { $durationMinutes = 360 }
          if ($durationMinutes -lt 1) { $durationMinutes = 1 }
          
          $rustDeskId = "${{ steps.get_id.outputs.rustdesk_id }}"
          $password = "GithubActions2024"
          
          Write-Host "============================================"
          Write-Host "Runner active for $durationMinutes minutes"
          Write-Host "ID: $rustDeskId"
          Write-Host "Password: $password"
          Write-Host "============================================"
          
          $endTime = (Get-Date).AddMinutes($durationMinutes)
          
          while ((Get-Date) -lt $endTime) {
              $remaining = [Math]::Ceiling((New-TimeSpan -Start (Get-Date) -End $endTime).TotalMinutes)
              Write-Host "Time remaining: $remaining minutes | ID: $rustDeskId"
              Start-Sleep -Seconds 60
          }
          
          Write-Host "Session completed."
