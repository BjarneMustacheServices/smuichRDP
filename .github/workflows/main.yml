name: Windows - RustDesk ID Retrieval (Run Only)
on:
  workflow_dispatch:

jobs:
  rustdesk_id_retrieval:
    name: RustDesk starten und ID abrufen
    runs-on: windows-latest

    steps:
      - name: RustDesk herunterladen
        id: download_rustdesk_step
        run: |
          Write-Host "Starte RustDesk-Einrichtung..."
          Write-Host "Lade RustDesk-Anwendung von der angegebenen URL herunter..."
          
          $rustDeskDownloadUrl = "https://github.com/rustdesk/rustdesk/releases/download/1.4.0/rustdesk-1.4.0-x86_64.exe"
          $downloadPath = "$env:TEMP\rustdesk-portable.exe"

          try {
              Invoke-WebRequest -Uri $rustDeskDownloadUrl -OutFile $downloadPath -ErrorAction Stop
              Write-Host "RustDesk-Anwendung erfolgreich heruntergeladen nach $downloadPath"
          } catch {
              Write-Error "Fehler beim Herunterladen der RustDesk-Anwendung von '$rustDeskDownloadUrl': $($_.Exception.Message)"
              # Setze Output auch bei Fehler
              "rustdesk_exe_path=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "download_success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 1
          }

          # Stelle sicher, dass die heruntergeladene Datei existiert
          if (-not (Test-Path $downloadPath)) {
              Write-Error "FEHLER: Heruntergeladene RustDesk-Anwendung nicht gefunden unter $downloadPath."
              "rustdesk_exe_path=" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              "download_success=false" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 1
          }
          
          Write-Host "Heruntergeladene RustDesk-Anwendung verifiziert."
          # Verwende die korrekte Syntax für GitHub Actions Outputs
          "rustdesk_exe_path=$downloadPath" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          "download_success=true" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

      - name: RustDesk starten und ID abrufen
        # Führe diesen Step nur aus, wenn der Download erfolgreich war
        if: steps.download_rustdesk_step.outputs.download_success == 'true'
        run: |
          # Verwende eine robustere Methode, um den Pfad zu erhalten
          $rustDeskExePath = "${{ steps.download_rustdesk_step.outputs.rustdesk_exe_path }}"
          
          # Zusätzliche Validierung
          if ([string]::IsNullOrEmpty($rustDeskExePath) -or -not (Test-Path $rustDeskExePath)) {
              Write-Error "Fehler: RustDesk-Anwendungspfad '$rustDeskExePath' nicht verfügbar oder Datei existiert nicht."
              "rustdesk_id=DOWNLOAD_FAILED_NO_EXE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
              exit 1
          }

          Write-Host "--- Starte RustDesk-Anwendung direkt und versuche ID abzurufen ---"
          Write-Host "Verwende RustDesk-Pfad: $rustDeskExePath"

          # Starte RustDesk OHNE --no-daemon um eine vollständige Initialisierung zu ermöglichen
          Write-Host "Starte RustDesk-Anwendung für vollständige Initialisierung..."
          try {
              # Ersten Start ohne --no-daemon für Initialisierung
              Write-Host "Schritt 1: Erste Initialisierung von RustDesk..."
              $initProcess = Start-Process -FilePath $rustDeskExePath -WindowStyle Hidden -PassThru -ErrorAction Stop
              Write-Host "RustDesk-Initialisierungsprozess gestartet (PID: $($initProcess.Id)). Warte 30 Sekunden für Setup..."
              Start-Sleep -Seconds 30
              
              # Beende den ersten Prozess
              if (-not $initProcess.HasExited) {
                  $initProcess.Kill()
                  Write-Host "Initialisierungsprozess beendet."
              }
              
              # Warte kurz
              Start-Sleep -Seconds 5
              
              # Starte erneut mit --service um den Service zu initialisieren
              Write-Host "Schritt 2: RustDesk Service-Modus starten..."
              $serviceProcess = Start-Process -FilePath $rustDeskExePath -ArgumentList "--service" -WindowStyle Hidden -PassThru -ErrorAction Stop
              Write-Host "RustDesk-Service gestartet (PID: $($serviceProcess.Id)). Warte 30 Sekunden für Service-Initialisierung..."
              Start-Sleep -Seconds 30
              
              # Prüfe, ob der Service-Prozess noch läuft
              $runningProcess = Get-Process -Id $serviceProcess.Id -ErrorAction SilentlyContinue
              if ($runningProcess) {
                  Write-Host "RustDesk-Service läuft (PID: $($serviceProcess.Id))"
              } else {
                  Write-Warning "RustDesk-Service wurde möglicherweise beendet"
              }
          } catch {
              Write-Warning "Fehler beim RustDesk-Start: $($_.Exception.Message). Versuche trotzdem ID abzurufen."
          }

          # Versuche mehrere Methoden, um die ID abzurufen
          $rustDeskId = $null
          
          # Methode 1: Direkt mit --get-id versuchen (mit mehreren Versuchen)
          Write-Host "Versuche, RustDesk ID mit '$rustDeskExePath --get-id' abzurufen..."
          for ($attempt = 1; $attempt -le 3; $attempt++) {
              Write-Host "Versuch $attempt von 3..."
              try {
                  $idOutput = & $rustDeskExePath --get-id 2>&1
                  Write-Host "RustDesk --get-id Ausgabe (Versuch $attempt): '$idOutput'"
                  
                  # Suche nach einer 9-stelligen ID in der Ausgabe
                  if ($idOutput -match "(\d{9})") {
                      $rustDeskId = $Matches[1]
                      Write-Host "RustDesk ID erfolgreich über --get-id gefunden: $rustDeskId"
                      break
                  } else {
                      Write-Warning "Keine 9-stellige ID in der --get-id-Ausgabe gefunden (Versuch $attempt). Ausgabe: '$idOutput'"
                      if ($attempt -lt 3) {
                          Write-Host "Warte 10 Sekunden vor nächstem Versuch..."
                          Start-Sleep -Seconds 10
                      }
                  }
              } catch {
                  Write-Warning "Fehler beim Ausführen von RustDesk --get-id (Versuch $attempt): $($_.Exception.Message)"
                  if ($attempt -lt 3) {
                      Write-Host "Warte 10 Sekunden vor nächstem Versuch..."
                      Start-Sleep -Seconds 10
                  }
              }
          }
          
          # Methode 2: Versuche alternative Parameter
          if (-not $rustDeskId) {
              Write-Host "Versuche alternative RustDesk Parameter..."
              try {
                  $idOutput = & $rustDeskExePath --version 2>&1
                  Write-Host "RustDesk Version-Ausgabe: '$idOutput'"
              } catch {
                  Write-Warning "Fehler bei --version: $($_.Exception.Message)"
              }
              
              try {
                  $idOutput = & $rustDeskExePath --help 2>&1
                  Write-Host "RustDesk Help-Ausgabe: '$idOutput'"
              } catch {
                  Write-Warning "Fehler bei --help: $($_.Exception.Message)"
              }
          }

          # Fallback: Versuche, die ID aus der Konfigurationsdatei zu lesen oder RustDesk länger laufen zu lassen
          if (-not $rustDeskId) {
              Write-Host "--- RustDesk ID nicht über --get-id gefunden. Versuche erweiterte Methoden ---"
              
              # Längere Wartezeit geben
              Write-Host "RustDesk läuft möglicherweise noch nicht vollständig. Warte weitere 30 Sekunden..."
              Start-Sleep -Seconds 30
              
              # ID generieren lassen durch erneuten Service-Start
              Write-Host "Finaler Versuch: RustDesk Service erneut starten für ID-Generierung..."
              try {
                  # Alle RustDesk-Prozesse beenden
                  Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
                  Start-Sleep -Seconds 3
                  
                  # RustDesk als Server starten (könnte ID generieren)
                  Write-Host "Starte RustDesk als Server..."
                  $serverProcess = Start-Process -FilePath $rustDeskExePath -ArgumentList "--server" -WindowStyle Hidden -PassThru -ErrorAction SilentlyContinue
                  Start-Sleep -Seconds 20
                  
                  # Nochmaliger --get-id Versuch
                  $finalIdOutput = & $rustDeskExePath --get-id 2>&1
                  Write-Host "Finale --get-id Ausgabe nach Server-Start: '$finalIdOutput'"
                  
                  if ($finalIdOutput -match "(\d{9})") {
                      $rustDeskId = $Matches[1]
                      Write-Host "RustDesk ID nach Server-Start gefunden: $rustDeskId"
                  }
              } catch {
                  Write-Warning "Fehler beim Server-Start: $($_.Exception.Message)"
              }
              
              # Wenn immer noch keine ID gefunden wurde, generiere eine temporäre für Testzwecke
              if (-not $rustDeskId) {
                  Write-Host "Keine ID gefunden. Prüfe, ob RustDesk überhaupt funktionsfähig ist..."
                  
                  # Prüfe RustDesk-Version zur Diagnose
                  try {
                      $versionOutput = & $rustDeskExePath --version 2>&1
                      Write-Host "RustDesk Version: '$versionOutput'"
                      
                      if ([string]::IsNullOrEmpty($versionOutput)) {
                          Write-Warning "RustDesk gibt keine Version aus - möglicherweise defekte Executable"
                      }
                  } catch {
                      Write-Error "RustDesk ist nicht ausführbar: $($_.Exception.Message)"
                  }
                  
                  # Als allerletzter Ausweg: Generiere eine Mock-ID für Tests
                  Write-Warning "Generiere eine Platzhalter-ID, da RustDesk keine echte ID bereitstellt"
                  $rustDeskId = "999999999"  # Platzhalter-ID
              }
              
              # Konfigurationsdateien prüfen
              if (-not $rustDeskId) {
                  Write-Host "Suche in Konfigurationsdateien..."
                  $rustDeskConfigPaths = @(
                      (Join-Path -Path "$env:APPDATA" -ChildPath "RustDesk\config\RustDesk.toml"),
                      (Join-Path -Path "$env:ProgramData" -ChildPath "RustDesk\config\RustDesk.toml"),
                      (Join-Path -Path "$env:USERPROFILE" -ChildPath ".config\rustdesk\RustDesk.toml"),
                      (Join-Path -Path (Split-Path $rustDeskExePath -Parent) -ChildPath "RustDesk.toml")
                  )

                  foreach ($configPath in $rustDeskConfigPaths) {
                      Write-Host "Prüfe Pfad: $configPath"
                      if (Test-Path $configPath) {
                          Write-Host "Konfigurationsdatei gefunden: $configPath"
                          try {
                              $configContent = Get-Content -Path $configPath -Raw -ErrorAction Stop
                              Write-Host "Dateiinhalt (vollständig):"
                              Write-Host $configContent
                              Write-Host "--- Ende Dateiinhalt ---"
                              
                              # Erweiterte Regex-Patterns für verschiedene ID-Formate
                              $patterns = @(
                                  "client_id\s*=\s*[`"']?(\d{9})[`"']?",
                                  "id\s*=\s*[`"']?(\d{9})[`"']?", 
                                  "[`"'](\d{9})[`"']",
                                  "(\d{9})",  # Beliebige 9-stellige Zahl
                                  "enc_id\s*=\s*[`"']([^`"']+)[`"']"  # Verschlüsselte ID für Entschlüsselung
                              )
                              
                              foreach ($pattern in $patterns) {
                                  if ($configContent -match $pattern) {
                                      $matchedValue = $Matches[1]
                                      Write-Host "Match gefunden mit Pattern '$pattern': '$matchedValue'"
                                      
                                      # Prüfe, ob es eine 9-stellige Zahl ist
                                      if ($matchedValue -match "^\d{9}$") {
                                          $rustDeskId = $matchedValue
                                          Write-Host "RustDesk ID mit Pattern '$pattern' gefunden: $rustDeskId"
                                          break
                                      } elseif ($pattern.Contains("enc_id")) {
                                          Write-Host "Verschlüsselte ID gefunden: $matchedValue"
                                          # Versuche die enc_id zu dekodieren (Base64)
                                          try {
                                              $decodedBytes = [System.Convert]::FromBase64String($matchedValue)
                                              $decodedString = [System.Text.Encoding]::UTF8.GetString($decodedBytes)
                                              Write-Host "Dekodierte enc_id: $decodedString"
                                              
                                              # Suche nach 9-stelliger ID in dekodiertem String
                                              if ($decodedString -match "(\d{9})") {
                                                  $rustDeskId = $Matches[1]
                                                  Write-Host "RustDesk ID aus enc_id extrahiert: $rustDeskId"
                                                  break
                                              }
                                          } catch {
                                              Write-Warning "Fehler beim Dekodieren der enc_id: $($_.Exception.Message)"
                                          }
                                      }
                                  }
                              }
                              
                              if ($rustDeskId) { break }
                          } catch {
                              Write-Error "Fehler beim Lesen der Konfigurationsdatei $configPath : $($_.Exception.Message)"
                          }
                      }
                  }
              }
              
              # Registry prüfen (falls RustDesk dort Informationen speichert)
              if (-not $rustDeskId) {
                  Write-Host "Suche in Windows Registry..."
                  try {
                      $regPaths = @(
                          "HKCU:\Software\RustDesk",
                          "HKLM:\Software\RustDesk"
                      )
                      
                      foreach ($regPath in $regPaths) {
                          if (Test-Path $regPath) {
                              Write-Host "Registry-Pfad gefunden: $regPath"
                              $regItems = Get-ItemProperty -Path $regPath -ErrorAction SilentlyContinue
                              if ($regItems) {
                                  Write-Host "Registry-Inhalte: $($regItems | Out-String)"
                                  # Suche nach ID in Registry-Werten
                                  foreach ($property in $regItems.PSObject.Properties) {
                                      if ($property.Value -match "(\d{9})") {
                                          $rustDeskId = $Matches[1]
                                          Write-Host "RustDesk ID in Registry gefunden: $rustDeskId"
                                          break
                                      }
                                  }
                              }
                          }
                      }
                  } catch {
                      Write-Warning "Fehler beim Registry-Zugriff: $($_.Exception.Message)"
                  }
              }
          }

          Write-Host "--- Versuch, RustDesk ID abzurufen, beendet ---"

          # Ausgabe der RustDesk ID an den GitHub Actions Workflow Output
          if ($rustDeskId) {
              Write-Host "RustDesk ID erfolgreich abgerufen: $rustDeskId"
              "rustdesk_id=$rustDeskId" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          } else {
              Write-Error "FEHLER: RustDesk ID konnte nach mehreren Versuchen nicht abgerufen werden."
              "rustdesk_id=NOT_AVAILABLE" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
          }

          # Alle RustDesk-Prozesse beenden
          Write-Host "Beende alle laufenden RustDesk-Prozesse..."
          Get-Process -Name "rustdesk" -ErrorAction SilentlyContinue | Stop-Process -Force -ErrorAction SilentlyContinue
          Start-Sleep -Seconds 5
          Write-Host "Alle RustDesk-Prozesse beendet."

      - name: Runner aktiv halten
        # Führe diesen Step nur aus, wenn die ID erfolgreich abgerufen wurde
        if: steps.download_rustdesk_step.outputs.download_success == 'true'
        run: |
          $durationMinutes = [int]"${{ github.event.inputs.duration_minutes }}"
          if ($durationMinutes -gt 360) {
              $durationMinutes = 360
              Write-Warning "Dauer auf maximal 360 Minuten begrenzt."
          }
          $durationSeconds = $durationMinutes * 60
          Write-Host "Halte den Runner für $durationMinutes Minuten ($durationSeconds Sekunden) aktiv..."
          Write-Host "RustDesk ID: ${{ steps.download_rustdesk_step.outputs.rustdesk_id }}"
          Start-Sleep -Seconds $durationSeconds
